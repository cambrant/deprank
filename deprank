#!/usr/bin/env python

import subprocess
from collections import Counter
from natsort import natsorted

printed_percentage = []

def output_percent_done(current, total):
    # Round the percentage of completed items down to the nearest 5 percent and
    # output that percentage if the percentage is divisible by 10 and if the
    # percentage has not been printed before.
    percent_done = int(float(current) / total * 100)

    if (percent_done - (percent_done % 5)) % 10 == 0:
        rounded_percentage = percent_done - (percent_done % 5)

        if rounded_percentage not in printed_percentage:
            printed_percentage.append(rounded_percentage)
            print "%d%% done" % rounded_percentage

command = ["find", "/bin/", "-type", "f", "-perm", "/a+x", "-exec", "ldd",
    "{}", ";"]

p = subprocess.Popen(command, stdout=subprocess.PIPE)
output = p.communicate()[0]

files = set()

for line in output.split('\n'):
    if 'so' not in line:
        continue

    filename = line.split()[0]
    if '/' in filename:
        filename = filename.split('/')[-1]

    files.add(filename)

file_count = len(files)
files_done = 0

packages = []
for f in files:
    try:
        output = subprocess.check_output(['dnf', 'provides', f],
                stderr=subprocess.STDOUT)
        package_name = output.split('\n')[1].split()[0]
        package_info = subprocess.check_output(['dnf', 'info', package_name])
        for line in package_info.split('\n'):
            if 'Name' in line:
                package_name = line.split()[-1]
                break
    except:
        # Could not get package name - discard the file and remove it from the
        # total count.
        file_count -= 1
        continue

    packages.append(package_name)
    files_done += 1

    output_percent_done(files_done, file_count)

stats = []
for f, c in Counter(packages).items():
    stats.append("%d\t%s" % (c, f))

for p in natsorted(stats):
    print p
