#!/usr/bin/env python

import sys
import subprocess
from natsort import natsorted
from getpass import getuser

class Deprank:
    def __init__(self):
        self.printed_percentage = []
        self.results = {}
        self.package_manager = None

    def output_percent_done(self, current, total):
        # Round the percentage of completed items down to the nearest 5 percent
        # and output that percentage if the percentage is divisible by 10 and if
        # the percentage has not been printed before.
        percent_done = int(float(current) / total * 100)

        if (percent_done - (percent_done % 5)) % 10 == 0:
            rounded_percentage = percent_done - (percent_done % 5)

            if rounded_percentage not in self.printed_percentage:
                self.printed_percentage.append(rounded_percentage)
                print "%d%% done" % rounded_percentage

    def cmd_exists(self, cmd):
        # Return True if the passed executable exists, False otherwise.
        return subprocess.call("type " + cmd, shell=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

    def get_package_info(self, files, progress_callback=None):
        # Get package information.

        package_name = ''
        package_info = ''

        # Keep files as a total list of files, and create a set of unique files
        # to iterate through, finding the package name for each of them.
        unique_files = set(files)

        file_count = len(files)
        files_done = 0
        for file_name in unique_files:
            occurance_count = files.count(file_name)

            try:
                output = subprocess.check_output([self.package_manager, '-q',
                    '-C', 'provides', file_name], stderr=subprocess.STDOUT)

                # Extract the full package name
                package_name = output.split('\n')[0].split()[0]

                # Remove the trailing architecture (".i686", etc) and
                # return the package_name.
                package_name = '.'.join(package_name.split('.')[0:-1])

                # Get the package info to extract the base package name.
                package_info = subprocess.check_output([self.package_manager,
                    '-q', '-C', 'info', package_name], stderr=subprocess.STDOUT)
            except IndexError:
                file_count -= occurance_count
                continue
            except subprocess.CalledProcessError:
                # Could not get package name - discard the file and remove it
                # from the total count.
                file_count -= occurance_count
                continue

            # Extract the base package name
            package_name = package_info.split('\n')[1].split()[-1]

            # Add the number of occurances of each file to the tally, to get the
            # true number of executables on the system which depend on the
            # package.
            if self.results.has_key(package_name):
                self.results[package_name] += occurance_count
            else:
                self.results[package_name] = occurance_count

            files_done += occurance_count

            if progress_callback:
                progress_callback(files_done, file_count)

    def get_library_file_list(self, directories):
        # Find all library files used by the executables in the passed list of
        # directories.

        library_files = []
        for directory in directories:
            command = ["find", directory, "-type", "f", "-perm", "/a+x",
                "-exec", "ldd", "{}", ";"]

            p = subprocess.Popen(command, stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE)
            output = p.communicate()[0]

            for line in output.split('\n'):
                if 'so' in line:
                    # Remove leading file path.
                    filename = line.split()[0]
                    if '/' in filename:
                        filename = filename.split('/')[-1]

                    library_files.append(filename)

        return library_files

    def find_package_manager(self):
        # Decide which package manager is available.
        if self.cmd_exists('dnf'):
            self.package_manager = 'dnf'
        elif self.cmd_exists('yum'):
            self.package_manager = 'yum'
        else:
            print 'Error: no package manager found!'
            return False

        return True

if __name__ == '__main__':
    deprank = Deprank()

    if getuser() != 'root':
        print 'Error: Not running as super user.'
        sys.exit(1)

    directories = ['/bin/', '/sbin/', '/usr/bin/', '/usr/sbin/',
        '/usr/local/bin/', '/usr/local/sbin/']

    if not deprank.find_package_manager():
        # No suitable package manager found. Exit.
        sys.exit(1)

    files = deprank.get_library_file_list(directories)

    # This is a potentially long running function call and we want the user to
    # be able to abort properly.
    try:
        deprank.get_package_info(files, deprank.output_percent_done)
    except KeyboardInterrupt:
        print 'Aborted.'
        sys.exit(1)

    # Format and output package statistics.
    stats = []
    for result in deprank.results:
        stats.append("%d\t%s" % (deprank.results[result], result))

    for package in natsorted(stats):
        print package
